ant.importBuild('orbeon/build.xml') { antTargetName -> 'orbeon-' + antTargetName }

def orbeonCommitHash() {
    def cmd = "git show -s --format=git%h --abbrev=7"
    def hash = null
    try {
      def proc = cmd.execute(null, file("${rootDir}/orbeon"))
      hash = proc.text.trim()
    } catch (Exception e) {
      println("Could not execute git command: " + e.message)
      hash = null
    }
    return hash
}

ext.orbeonHash = orbeonCommitHash();
ext.vanillaOrbeonWarName = "orbeon-${ant.properties['version.number']}${ant.properties['edition']}-${orbeonHash}.war"
ext.orbeonFilterJarName = "orbeon-xforms-filter-${ant.properties['version.number']}${ant.properties['edition']}-${orbeonHash}.jar"

ext.orbeonAntWarTasks = ['orbeon-exits-task', 'orbeon-exist-import-sample-data-to-build', 'orbeon-orbeon-dist-war']
tasks
  .matching { task -> orbeonAntWarTasks.contains(task.name) }
  .each { task -> task.outputs.upToDateWhen {
    file("${buildDir}/${vanillaOrbeonWarName}").exists()
    //layout.buildDirectory.file(vanillaOrbeonWarName).exists()
  }
}

tasks.getByName('orbeon-war-common').outputs.upToDateWhen {
  file("${buildDir}/${vanillaOrbeonWarName}").exists() || 
  file("${buildDir}/${orbeonFilterJarName}").exists()
  // layout.buildDirectory.file(vanillaOrbeonWarName).exists() ||
  // layout.buildDirectory.file(orbeonFilterJarName).exists()
}

tasks.getByName('orbeon-xforms-filter-jar').outputs.file('orbeon/build/lib/orbeon-xforms-filter.jar')

tasks.register('buildVanillaOrbeonWar') {
  dependsOn('orbeon-orbeon-dist-war')
  outputs.file(layout.buildDirectory.file(vanillaOrbeonWarName))
  doLast {
    copy {
      from "orbeon/build/distrib/${ant.properties['versioned-name']}.war"
      into layout.buildDirectory
      rename {
        vanillaOrbeonWarName
      }
    }
  }
}

tasks.register('buildOrbeonFilter') {
  dependsOn('orbeon-xforms-filter-jar')
  outputs.file(layout.buildDirectory.file(orbeonFilterJarName))
  doLast {
    copy {
      from 'orbeon/build/lib/orbeon-xforms-filter.jar'
      into layout.buildDirectory
      rename {
        orbeonFilterJarName
      }
    }
  } 
}

tasks.register('clean'){
  dependsOn('orbeon-clean')
  doLast {
    delete buildDir
  }
}
